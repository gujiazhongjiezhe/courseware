##云鸟:
1、html标签语义化的好处
> 1. 利于seo优化
> 2. 在样式丢失的时候，还是可以比较好的呈现结构
> 3. 更好的支持各种终端，例如无障碍阅读和有声小说等.
> 4. 利于团队开发和维护，遵循w3c规范，减少代码差异，提高效率.

2、盒子模型 加了box-sizing 之后怎样?
> IE5.x以及Quirks(怪异)模式的IE6， IE7中， border和padding都包含在width和height中.
> 标准浏览器中 width和height仅仅包含content， 不包含border和padding。
> css3 定义了box-sizing属性:
> box-sizing:content-box|border-box|inherit;
> content-box: 该属性维持css2.1盒模型的组成方式
> border-box：该属性将重新定义css2.1盒模型组成模式(与IE6解析相同)

3、行内元素有哪些 块级有哪些 行内块级有哪些?
4、左侧固定两百 右侧自适应 这种布局怎么写？多种方式。用flexbox怎么写？
5、less如何定义一个函数 如圆角
6、一个url 后面好多key-value 如localhost?key=val&key2=val2&key3=val3 封装一个函数 getParam('key') 通过key获得相应等号后面的值.
```
 //
    String.prototype.getParam=function (key) {
        var  str=this.split("?")[1];
        str=str.replace(/&/g,"',");
        str=str.replace(/=/g,":'");
        var obj=eval("({" + str + "'})");
        for(var x in obj){
            if(key==x){
                return obj[key];
            }
        }
    };
    var url="locallhost?key1=val1&key2=val2&key3=val3";
    console.log(url.getParam("key3"));


    String.prototype.getParam=function (key) {
        var reg=new  RegExp(key+"=(\\w+)");
        return reg.exec(this)[1];
    };
    url.getParam("key3");
    String.prototype.getParam=function (key) {
        var val=null;
        this.replace(/(\w+)=(\w+)/g,function () {
            if(arguments[1]==key)
                val=arguments[2];
        });
       return val;
    };
    console.log(url.getParam("key3"));//val3

```
7、封装一个函数 getForm(form元素) 如何将里面的各个表单的值放到一个对象里面，并且返回。
```
function getForm(form) {
    var inputs=form.getElementsByTagName("input");
    var selects=form.getElementsByTagName("select");
    var obj={};
    var ary=[].concat.apply([],inputs);
    ary=ary.concat.apply(ary,selects);
    ary.forEach(function (item) {
        //this==window;
        obj[item.name]=item.value;
    });
    return obj;
}
```
8、你有什么想问我的么?
9、你想找个什么样的工作?
10、vue如何保证js之间互相不影响?
11、localStorage和sessionStorage区别
```
localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。

他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。

localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。

sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。

不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。
```